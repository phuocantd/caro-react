{"version":3,"sources":["components/Square.js","components/Board.js","App.js","index.js"],"names":["Square","props","className","curClick","isWin","onClick","value","Board","reverseArray","history","state","slice","reverse","setState","isForward","clickList","length","size","squares","Array","fill","map","isDark","isList","xIsNext","status","isWinner","preRowDark","x","y","stepCurrent","checkRow","bind","checkCol","checkSlash","checkBackSlash","checkWinner","handleClick","renderSquare","getArray","resetGame","i","block","count","row","Math","floor","this","col","k","player","type","r","c","item","pop","shift","push","unshift","winner","key","number","arr","arrTmp","String","fromCharCode","j","idx","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b9e9c70.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Square(props) {\r\n    return (\r\n        <button\r\n            className={\"square \" + (props.curClick ? 'square-click' : '') + (props.isWin ? 'square-win' : '')}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}","import React from 'react';\r\nimport Square from './Square';\r\n\r\nexport default class Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { size } = this.props\r\n        this.state = {\r\n            squares: Array(size).fill(null)\r\n                .map(() => Array(size).fill(null)),\r\n            className: new Array(size).fill(null)\r\n                .map(() => new Array(size).fill(null)\r\n                    .map(() => ({ isDark: false, isWin: false, isList: false }))),\r\n            xIsNext: true,\r\n            status: 'Next player: X',\r\n            isWinner: false,\r\n            preRowDark: { x: 0, y: 0 },\r\n            history: [],\r\n            isForward: true,\r\n            stepCurrent: -1\r\n        };\r\n        this.checkRow = this.checkRow.bind(this)\r\n        this.checkCol = this.checkCol.bind(this)\r\n        this.checkSlash = this.checkSlash.bind(this)\r\n        this.checkBackSlash = this.checkBackSlash.bind(this)\r\n        this.checkWinner = this.checkWinner.bind(this)\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.reverseArray = this.reverseArray.bind(this)\r\n        this.renderSquare = this.renderSquare.bind(this)\r\n        this.getArray = this.getArray.bind(this)\r\n        this.resetGame = this.resetGame.bind(this)\r\n        this.clickList = this.clickList.bind(this)\r\n    }\r\n\r\n    checkRow(i) {\r\n        let block = 0;\r\n        let count = 1;\r\n        let row = Math.floor(i / this.props.size), col = i % this.props.size;\r\n        const squares = this.state.squares.slice();\r\n        let k = col + 1;\r\n        if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n            block++;\r\n        }\r\n        while (squares[row][k] === squares[row][col] && k < this.props.size) {\r\n            count = count + 1;\r\n            k++;\r\n            if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n                block++;\r\n                break;\r\n            }\r\n        }\r\n        k = col - 1;\r\n        if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n            block++;\r\n        }\r\n        while (squares[row][k] === squares[row][col] && k >= 0) {\r\n            count = count + 1;\r\n            k--;\r\n            if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n                block++;\r\n                break;\r\n            }\r\n        }\r\n        if (block < 2 && count === 5) {\r\n            return { player: squares[row][col], type: 0 };\r\n        }\r\n        return null;\r\n    }\r\n    checkCol(i) {\r\n        let block = 0;\r\n        let count = 1;\r\n        let row = Math.floor(i / this.props.size), col = i % this.props.size;\r\n        const squares = this.state.squares.slice();\r\n        let k = row + 1;\r\n        if (k < this.props.size && squares[k][col] !== squares[row][col] && squares[k][col] !== null) {\r\n            block++;\r\n        }\r\n        while (k < this.props.size && squares[k][col] === squares[row][col]) {\r\n            count = count + 1;\r\n            k++;\r\n            if (k < this.props.size && squares[k][col] !== squares[row][col] && squares[k][col] !== null) {\r\n                block++;\r\n                break;\r\n            }\r\n        }\r\n        k = row - 1;\r\n        if (k >= 0 && squares[k][col] !== squares[row][col] && squares[k][col] !== null) {\r\n            block++;\r\n        }\r\n        while (k >= 0 && squares[k][col] === squares[row][col]) {\r\n            count = count + 1;\r\n            k--;\r\n            if (k >= 0 && squares[k][col] !== squares[row][col] && squares[k][col] !== null) {\r\n                block++;\r\n                break;\r\n            }\r\n        }\r\n        if (block < 2 && count === 5) {\r\n            return { player: squares[row][col], type: 1 };\r\n        }\r\n        return null;\r\n    }\r\n    checkSlash(i) {\r\n        let block = 0;\r\n        let count = 1;\r\n        let row = Math.floor(i / this.props.size), col = i % this.props.size;\r\n        const squares = this.state.squares.slice();\r\n        let r = row - 1, c = col + 1;\r\n        if (r >= 0 && c < this.props.size && squares[r][c] !== squares[row][col] && squares[r][c] !== null) {\r\n            block++;\r\n        }\r\n        while (r >= 0 && c < this.props.size && squares[r][c] === squares[row][col]) {\r\n            count = count + 1;\r\n            r--; c++;\r\n            if (r >= 0 && c < this.props.size && squares[r][c] !== squares[row][col] && squares[r][c] !== null) {\r\n                block++;\r\n                break;\r\n            }\r\n        }\r\n        r = row + 1; c = col - 1;\r\n        if (r < this.props.size && c >= 0 && squares[r][c] !== squares[row][col] && squares[r][c] !== null) {\r\n            block++;\r\n        }\r\n        while (r < this.props.size && c >= 0 && squares[r][c] === squares[row][col]) {\r\n            count = count + 1;\r\n            r++; c--;\r\n            if (r < this.props.size && c >= 0 && squares[r][c] !== squares[row][col] && squares[r][c] !== null) {\r\n                block++;\r\n                break;\r\n            }\r\n        }\r\n        if (block < 2 && count === 5) {\r\n            return { player: squares[row][col], type: 2 };\r\n        }\r\n        return null;\r\n    }\r\n    checkBackSlash(i) {\r\n        let block = 0;\r\n        let count = 1;\r\n        let row = Math.floor(i / this.props.size), col = i % this.props.size;\r\n        const squares = this.state.squares.slice();\r\n        let r = row - 1, c = col - 1;\r\n        if (r >= 0 && c >= 0 && squares[r][c] !== squares[row][col] && squares[r][c] !== null) {\r\n            block++;\r\n        }\r\n        while (r >= 0 && c >= 0 && squares[r][c] === squares[row][col]) {\r\n            count = count + 1;\r\n            r--; c--;\r\n            if (r >= 0 && c >= 0 && squares[r][c] !== squares[row][col] && squares[r][c] !== null) {\r\n                block++;\r\n                break;\r\n            }\r\n        }\r\n        r = row + 1; c = col + 1;\r\n        if (r < this.props.size && c < this.props.size && squares[r][c] !== squares[row][col] && squares[r][c] !== null) {\r\n            block++;\r\n        }\r\n        while (r < this.props.size && c < this.props.size && squares[r][c] === squares[row][col]) {\r\n            count = count + 1;\r\n            r++; c++;\r\n            if (r < this.props.size && c < this.props.size && squares[r][c] !== squares[row][col] && squares[r][c] !== null) {\r\n                block++;\r\n                break;\r\n            }\r\n        }\r\n        if (block < 2 && count === 5) {\r\n            return { player: squares[row][col], type: 3 };\r\n        }\r\n        return null;\r\n    }\r\n    checkWinner(i) {\r\n        let isWin = this.checkRow(i);\r\n        if (isWin !== null) {\r\n            return isWin;\r\n        }\r\n        isWin = this.checkCol(i);\r\n        if (isWin !== null) {\r\n            return isWin;\r\n        }\r\n        isWin = this.checkSlash(i);\r\n        if (isWin !== null) {\r\n            return isWin;\r\n        }\r\n        isWin = this.checkBackSlash(i);\r\n        if (isWin !== null) {\r\n            return isWin;\r\n        }\r\n        return null\r\n    }\r\n\r\n    handleClick(i) {\r\n        let row = Math.floor(i / this.props.size), col = i % this.props.size, k = 0, r = 0, c = 0;\r\n        const squares = this.state.squares.slice();\r\n        const className = this.state.className.slice();\r\n        const history = this.state.history.slice();\r\n        const { preRowDark, stepCurrent } = this.state;\r\n        let item = null;\r\n\r\n        if (squares[row][col] || this.state.isWinner) {\r\n            return;\r\n        }\r\n\r\n\r\n        if (this.state.isForward) {\r\n            while (stepCurrent + 1 < history.length) {\r\n                item = history.pop()\r\n                squares[item.x][item.y] = false\r\n            }\r\n        } else {\r\n            for (let k = 0; k < stepCurrent; k++) {\r\n                item = history.shift()\r\n                squares[item.x][item.y] = false\r\n            }\r\n        }\r\n\r\n        if (this.state.isForward) {\r\n            history.push({ x: row, y: col, player: (this.state.xIsNext ? 'X' : 'O') })\r\n            this.clickList(this.state.stepCurrent + 1)\r\n        } else {\r\n            history.unshift({ x: row, y: col, player: (this.state.xIsNext ? 'X' : 'O') })\r\n            this.clickList(0)\r\n        }\r\n        this.setState({\r\n            history: [...history],\r\n            //stepCurrent: this.state.stepCurrent + 1\r\n        })\r\n\r\n\r\n        className[preRowDark.x][preRowDark.y].isDark = false\r\n        className[row][col].isDark = true;\r\n\r\n        squares[row][col] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            squares: [...squares],\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n        const winner = this.checkWinner(i);\r\n        if (winner) {\r\n            className[row][col].isDark = false;\r\n            this.setState({\r\n                status: 'Winner: ' + winner.player,\r\n                isWinner: true\r\n            })\r\n            className[row][col].isWin = true;\r\n            switch (winner.type) {\r\n                case 0:\r\n                    k = col - 1;\r\n                    while (squares[row][k] === squares[row][col] && k < this.props.size) {\r\n                        className[row][k].isWin = true;\r\n                        k++;\r\n                    }\r\n                    k = col - 1;\r\n                    while (squares[row][k] === squares[row][col] && k >= 0) {\r\n                        className[row][k].isWin = true;\r\n                        k--;\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    k = row + 1;\r\n                    while (k < this.props.size && squares[k][col] === squares[row][col]) {\r\n                        className[k][col].isWin = true;\r\n                        k++;\r\n                    }\r\n                    k = row - 1;\r\n                    while (k >= 0 && squares[k][col] === squares[row][col]) {\r\n                        className[k][col].isWin = true;\r\n                        k--;\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    r = row - 1; c = col + 1;\r\n                    while (r >= 0 && c < this.props.size && squares[r][c] === squares[row][col]) {\r\n                        className[r][c].isWin = true;\r\n                        r--; c++;\r\n                    }\r\n                    r = row + 1; c = col - 1;\r\n                    while (r < this.props.size && c >= 0 && squares[r][c] === squares[row][col]) {\r\n                        className[r][c].isWin = true;\r\n                        r++; c--;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    r = row - 1; c = col - 1;\r\n                    while (r >= 0 && c >= 0 && squares[r][c] === squares[row][col]) {\r\n                        className[r][c].isWin = true;\r\n                        r--; c--;\r\n                    }\r\n                    r = row + 1; c = col + 1;\r\n                    while (r < this.props.size && c < this.props.size && squares[r][c] === squares[row][col]) {\r\n                        className[r][c].isWin = true;\r\n                        r++; c++;\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            this.setState({\r\n                status: 'Next player: ' + (this.state.xIsNext ? 'O' : 'X'),\r\n                className: [...className],\r\n                preRowDark: { x: row, y: col }\r\n            })\r\n        }\r\n    }\r\n\r\n    reverseArray = () => {\r\n        const history = this.state.history.slice();\r\n        history.reverse();\r\n        this.setState({\r\n            history: [...history],\r\n            isForward: !this.state.isForward\r\n        })\r\n        if(this.state.isForward){\r\n            this.clickList(0)\r\n        }\r\n        else{\r\n            this.clickList(this.state.history.length-1)\r\n        }\r\n    }\r\n\r\n    renderSquare(i) {\r\n        let row = Math.floor(i / this.props.size);\r\n        let col = i % this.props.size;\r\n        const { squares, className } = this.state;\r\n        return (\r\n            <Square\r\n                value={squares[row][col]}\r\n                onClick={() => this.handleClick(i)}\r\n                key={i}\r\n                curClick={className[row][col].isDark}\r\n                isWin={className[row][col].isWin}\r\n            />\r\n        );\r\n    }\r\n\r\n    getArray(number) {\r\n        let count = 0;\r\n        let arr = [];\r\n        let arrTmp = [];\r\n\r\n        arrTmp.push(\r\n            <button className={\"square\"} key={0}>\r\n                {}\r\n            </button>\r\n        )\r\n        for (let i = 0; i < number; i++) {\r\n            arrTmp.push(\r\n                <button className={\"square\"} key={i + 1}>\r\n                    {String.fromCharCode(i + 65)}\r\n                </button>\r\n            )\r\n        }\r\n        arr.push(arrTmp)\r\n\r\n        for (let i = 0; i < number; i++) {\r\n            arrTmp = []\r\n            arrTmp.push(\r\n                <button className={\"square\"} key={-1}>\r\n                    {i + 1}\r\n                </button>\r\n            )\r\n            for (let j = 0; j < number; j++) {\r\n                arrTmp.push(this.renderSquare(count))\r\n                count++;\r\n            }\r\n            arr.push(<div className=\"board-row\" key={i}>{arrTmp}</div>)\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    resetGame() {\r\n        let { size } = this.props\r\n        this.setState({\r\n            squares: Array(size).fill(null)\r\n                .map(() => Array(size).fill(null)),\r\n            className: new Array(size).fill(null)\r\n                .map(() => new Array(size).fill(null)\r\n                    .map(() => ({ isDark: false, isWin: false, isList: false }))),\r\n            xIsNext: true,\r\n            status: 'Next player: X',\r\n            isWinner: false,\r\n            preRowDark: { x: 0, y: 0 },\r\n            history: [],\r\n            stepCurrent: -1\r\n        })\r\n    }\r\n\r\n    clickList(idx) {\r\n        const { stepCurrent } = this.state;\r\n        const className = this.state.className.slice();\r\n        let row = Math.floor(stepCurrent / this.props.size), col = stepCurrent % this.props.size;\r\n        if (stepCurrent >= 0) {\r\n            className[row][col].isList = false;\r\n        }\r\n        row = Math.floor(idx / this.props.size); col = idx % this.props.size;\r\n        className[row][col].isList = true;\r\n        this.setState({\r\n            stepCurrent: idx,\r\n            className: [...className]\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { size } = this.props;\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <button className=\"btn-reset\" type=\"button\" onClick={() => this.resetGame()}>Reset</button>\r\n                    <div className=\"status\">\r\n                        {this.state.status}\r\n                    </div>\r\n\r\n                    {this.getArray(this.props.size)}\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <button\r\n                        className={'btn-history'}\r\n                        onClick={this.reverseArray}\r\n                    >\r\n                        History\r\n                    </button>\r\n                    {this.state.history.map((item, idx) => {\r\n                        return (\r\n                            <ol key={item.x * size + item.y}>\r\n                                <button\r\n                                    className={'btn-list ' + (this.state.className[Math.floor(idx / size)][idx % size].isList ? 'btn-list-clicked' : '')}\r\n                                    onClick={() => this.clickList(idx)}\r\n                                >\r\n                                    <span>\r\n                                        {`Player ${item.player}: [${item.x + 1}, ${String.fromCharCode(item.y + 65)}]`}\r\n                                    </span>\r\n                                </button>\r\n                            </ol>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport Board from './components/Board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Board size={20} />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}